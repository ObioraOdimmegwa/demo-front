@using Client.Components.Wallet
@using Microsoft.AspNetCore.Components.Authorization
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
           @if(loaded)
           {
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
           }
           else
           {
               <Loader/>
           }
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>

</CascadingAuthenticationState>

@code
{
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject]
    ModelManager ModelManager { get; set; }
    
    public bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateChanged;
        ModelManager.Updated += ModelUpdated;

        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if(authState != ((AuthStateProvider)AuthenticationStateProvider)._anonymous)
        {
            await ModelManager.Download();
            await InvokeAsync(StateHasChanged);
        }
        loaded = true;
        await base.OnInitializedAsync();
    }

    private async Task ModelUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }
    private async void AuthStateChanged(Task<AuthenticationState> e)
    {
        var state = await e;
        if(state == ((AuthStateProvider)AuthenticationStateProvider)._anonymous)
            NavigationManager.NavigateTo("/login");
    }
}